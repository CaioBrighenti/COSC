-- COSC 304 Fall 2019 
-- Lab 3 Sept 17, 2019 
-- CBRLab3 

{- Replace ABC above and below with your 3 letters, capped.
Then rename the file, again changing ABC with your 3 letters, capped. -}

module CBRLab3 where 

-- add
add (x,y) = x + y
times (x,y) = x * y

-- 1 - monext
monext f bin iden [] = iden
monext f bin iden (first:rest) = bin(f first, monext f bin iden rest)
f num1 = 3*num1 + 2
g num1 = num1 + 1

-- 2 - faspec1
faspec1 'a' 0 = 1
faspec1 'a' 1 = 2
faspec1 'a' 2 = 0
faspec1 'b' 0 = 0
faspec1 'b' 1 = 2
faspec1 'b' 2 = 2
faspec1 'c' 0 = 2
faspec1 'c' 1 = 0
faspec1 'c' 2 = 1

-- comp
-- first apply f, then g to the output
comp(f, g) val = g(f val)
-- iden is just a function that returns itself
iden val = val

-- 3 - fa faspec
fa faspec = monext faspec comp iden
fa1 = fa faspec1

-- 4 - defining language machine
---- need fa specification, string, and starting state
startm faspec str = fa faspec str 0

-- 5 - defining machine specification
dfaspec1 = (faspec1, [0,2])
-- get the output state given str, then check if this is a final state
dfa (faspec,finalstates) str = inlist(startm faspec str) finalstates

-- in list helper
inlist val [] = False
-- for each item in list, check if equals val until no items left
inlist val (first:rest) = if first == val
    then True
    else inlist val rest

-- 6 - testing dfa
dfa1 = dfa dfaspec1

{- Expressions test1, ... test7 ARE DEFINED IN THIS FILE, NOT IN THE TEST FILE -}
test1 = monext f add 0 [3,4,7]
test2 = monext g times 1 [2,4,1]
test3 = fa1 "abbababbaba" 0
test4 = fa1 "abbababbababba" 1
test5 = startm faspec1 "abbababbababba"
test6 = dfa1 "abbababbaba"
test7 = dfa1 "abbababbababba"

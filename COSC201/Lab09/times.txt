1. Calculate the time for ArraySum.s to execute for a single cycle CPU, assuming 1000 iterations. (cycle time is 800 ps)
	2* 800 + 9*800*1000 = 7,201,600 ps = 7201.6 ns

2. Insert the needed nops into ArraySum.s assuming accelerated branch and full data forwarding for the five-stage pipeline. Note that there will always be a nop after any branch, since the pipeline will always stall one cycle for any branch taken. Calculate the time, assuming 1000 iterations (cycle time 200 ps). (Save as ArraySumP1.s)
	2 * 200 + 12 * 200 * 1000 - 1 * 200 = 2,400,200 ps = 2400.2 ns

3. Modify the ArraySum.s code to optimize assuming accelerated branch and data forwarding. (Save as ArraySumP2.s) Calculate the time, assuming 1000 iterations. Note that any branch taken will incur a one cycle stall, but not if not taken -- you can indicate this by putting a line "stall if taken" after a conditional branch and a nop after an unconditional branch.
	2 * 200 + 10 * 200 * 1000 - 1 * 200 = 2,000,200 ps = 2000.2 ns

4. Unroll the loop four iterations Use the same assumptions as for step 3. Rearrange code to minimize the need for nops, assuming data forwarding. Calculate the time, assuming 1000 iterations.(Save as ArraySumP3.s)
	2 * 200 + 24 * 200 * 250 - 1 * 200 = 1,200,000 ps = 1200.2 ns

5. Assume that you have a dual pipeline architecture. One pipeline only does load and stores, the other does all other instructions. Accelerated branch and full data forwarding (even across pipelines). Give the best organization of the code with no loop unrolling. Calculate the time, assuming 1000 iterations.(Save as ArraySumD1.s)
	2 * 200 + 7 * 200 * 1000 - 1 * 200 = 1,400,200 ps = 1400.2 ns
